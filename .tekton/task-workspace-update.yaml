apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-task
spec:
  params:
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: WORKSPACE_ID
      description: the workspace id
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: apikey
      description: the ibmcloud api key
    - name: enable-automatic-plan-apply
      description: if true, a plan and apply will be automatically executed upon changes to the template code
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  steps:
    - name: workspace-update
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      envFrom:
        - configMapRef:
            name: environment-properties
        - secretRef:
            name: secure-properties
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: ENABLE_PLAN_APPLY
          value: $(params.enable-automatic-plan-apply)
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [ "$ENABLE_PLAN_APPLY" != "true" ]; then
            echo "Automatic plan and apply have been disabled. Re-enable by setting the enable-automatic-plan-apply environment property to true."
            exit 0
          fi
          
          echo "Workspace $WORKSPACE_ID"

          REGION="--no-region"
          # only parse the region if its the *NEW* workspace id format
          if [[ "$WORKSPACE_ID" == *".workspace"* ]]; then
              REGION=" -r $(echo $WORKSPACE_ID | cut -f1 -d.)"
          fi
          echo "REGION: $REGION"

          # force login (required by schematics cli)
          ibmcloud login --apikey $API_KEY -a "$IBM_CLOUD_API" $REGION

          echo "Pull the latest changes into workspace..."
          ibmcloud schematics workspace update --id $WORKSPACE_ID --pull-latest

          # poll until status is INACTIVE, or if there is an error
          while :
          do
            STATUS=$(ibmcloud schematics workspace get --id $WORKSPACE_ID --output json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "DRAFT" ] || [ "$STATUS_VALUE" = "CONNECTING" ]; then
                # sleep for 5 seconds, while waiting for completion
                sleep 5
              elif [ "$STATUS_VALUE" = "INACTIVE" ]; then
                ibmcloud schematics workspace get --id $WORKSPACE_ID
                exit 0
              else
                ibmcloud schematics workspace get --id $WORKSPACE_ID
                exit 1
              fi
            fi
          done
